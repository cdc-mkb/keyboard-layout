/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ß │ ´ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ Q │ W │ E │ R │ T │ Z │ U │ I │ O │ P │ Ü │ + │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Ö │ Ä │ # │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ < │ Y │ X │ C │ V │ B │ N │ M │ , │ . │ - │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)

// Row 2
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +

// Row 3
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #

// Row 4
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -

/* Shifted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ° │ ! │ " │ § │ $ │ % │ & │ / │ ( │ ) │ = │ ? │ ` │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │   │   │   │   │   │   │   │   │   │   │   │ * │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │   │   │   │   │   │   │   │   │   │   │ ' │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ > │   │   │   │   │   │   │   │ ; │ : │ _ │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
// Row 2
#define DE_ASTR LS(DE_PLUS) // *
// Row 3
#define DE_QUOT LS(DE_HASH) // '
// Row 4
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _

/* Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ „ │ ¡ │ “ │ ¶ │ ¢ │ [ │ ] │ | │ { │ } │ ≠ │ ¿ │   │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ « │ ∑ │ € │ ® │ † │ Ω │ ¨ │ ⁄ │ Ø │ π │ • │ ± │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ Å │ ‚ │ ∂ │ ƒ │ © │ ª │ º │ ∆ │ @ │ Œ │ Æ │ ‘ │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≤ │ ¥ │ ≈ │ Ç │ √ │ ∫ │ ~ │ µ │ ∞ │ … │ – │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~

/* Shift+Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │   │ ¬ │ ” │   │ £ │ ﬁ │   │ \ │ ˜ │ · │ ¯ │ ˙ │ ˚ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ » │   │ ‰ │ ¸ │ ˝ │ ˇ │ Á │ Û │   │ ∏ │   │  │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │ Í │ ™ │ Ï │ Ì │ Ó │ ı │   │ ﬂ │   │   │   │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≥ │ ‡ │ Ù │   │ ◊ │ ‹ │ › │ ˘ │ ˛ │ ÷ │ — │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)

#define DEFAULT 0
#define SYMBOLS 1
#define NUM 2
#define FUN 3

/ {
    behaviors {
        hl: hl {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Sticky Layer";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sl>, <&kp>;
        };

        tl: tl {
            compatible = "zmk,behavior-hold-tap";
            label = "To Layer";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };
};

#define _____ &none
#define HYPER LC(LG(LS(LALT)))
#define MEH LC(LS(LALT))

&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    quick_tap_ms = <50>;
    bindings = <&sk>, <&kp>;
};

/ {
    keymap {
        compatible = "zmk,keymap";


        /**
        layer {
            bindings = <
            _____ _____ _____ _____ _____ _____                         _____ _____ _____ _____ _____ _____
            _____ _____ _____ _____ _____ _____                         _____ _____ _____ _____ _____ _____
            _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____
                              _____ _____ _____ _____ _____ _____ _____ _____ _____ _____
            >;
        };
        **/

        alpha {
            bindings = <
            _____ &kp DE_V &kp DE_X   &kp DE_DOT &kp DE_Q            &kp DE_J                                &kp DE_W   &kp DE_P       &kp DE_F         &kp DE_COMM &kp DE_K _____
            _____ &kp DE_C &kp DE_R   &kp DE_I   &kp DE_E            &kp DE_O                                &kp DE_M   &kp DE_N       &kp DE_T         &kp DE_S    &kp DE_H _____
            _____ &kp DE_Z &hl 6 DE_L &tl 4 DE_U &hl 2 DE_A          _____           _____ _____ _____ _____ _____      &hl 1 DE_B     &tl 3 DE_D       &hl 5 DE_G  &kp DE_Y _____
                                      &mt MEH TAB &mt LALT BACKSPACE &mt LCTRL SPACE _____ _____ _____ _____ &sk LSHFT  &mt LGUI ENTER &mt HYPER ESCAPE
            >;
        };


        sym_right {
            bindings = <
            _____ &kp DE_QUOT &kp DE_DQUO &kp DE_UDIA &kp DE_ADIA &kp DE_SS                           _____    _____ _____       _____       _____     _____
            _____ &kp DE_UNDS &kp DE_MINS &kp DE_QUES &kp DE_EXLM &kp DE_ODIA                         _____    _____ &kp LCTRL   &kp LSHFT   &kp LALT  _____
            _____ &kp DE_EQL  &kp DE_PLUS &kp DE_LPRN &kp DE_RPRN _____       _____ _____ _____ _____ _____    _____ &kp DE_COLN &kp DE_HASH &kp DE_AT _____
                                          _____       _____       _____       _____ _____ _____ _____ &kp LGUI _____ _____
            >;
        };

        sym_left {
            bindings = <
            _____ _____       _____      _____       _____ _____                             &kp DE_ACUT &kp DE_RCBR &kp DE_RBRC &kp DE_RABK &kp DE_CIRC _____
            _____ &kp LALT    &kp LSHFT  &kp LCTRL   _____ _____                             &kp DE_EURO &kp DE_LCBR &kp DE_LBRC &kp DE_LABK &kp DE_SLSH _____
            _____ &kp DE_PERC &kp DE_DLR &kp DE_SCLN _____ _____     _____ _____ _____ _____ _____       &kp DE_TILD &kp DE_PIPE &kp DE_ASTR &kp DE_BSLS _____
                                         _____       _____ &kp LGUI _____ _____ _____ _____ _____       _____       _____
            >;
        };

        num_right {
            bindings = <
            _____ &kp PGUP   &kp DELETE &kp UP   &kp BACKSPACE &kp PG_DN                         _____     _____    _____ _____     _____    _____
            _____ &kp HOME   &kp LEFT   &kp DOWN &kp RIGHT     &kp END                           _____     &kp LGUI _____ &kp LSHFT &kp LALT _____
            _____ &kp ESCAPE &kp TAB    &kp INS  &kp ENTER     _____     _____ _____ _____ _____ _____     &to 3    &to 0 _____     _____    _____
                                        _____    _____         _____     _____ _____ _____ _____ &kp LCTRL _____    _____
            >;
        };


        num_left {
            bindings = <
            _____ _____    _____     _____ _____    _____                             &kp DE_MINS &kp N7 &kp N8 &kp N9 &kp DE_ASTR _____
            _____ &kp LALT &kp LSHFT _____ &kp LGUI _____                             &kp DE_PLUS &kp N4 &kp N5 &kp N6 &kp N0      _____
            _____ _____    _____     &to 0 &to 4    _____     _____ _____ _____ _____ _____       &kp N1 &kp N2 &kp N3 &kp DE_SLSH _____
                                     _____ _____    &kp LCTRL _____ _____ _____ _____ &kp DE_EQL  _____ _____
            >;
        };


        fun_right {
            bindings = <
            _____ &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 _____            _____                         _____      _____    _____     _____ _____    _____
            _____ &kp C_PREV &kp C_NEXT   &kp C_VOL_DN &kp C_VOL_UP     _____                         _____      &kp LGUI &kp LCTRL _____ &kp LALT _____ 
            _____ _____      _____        &kp C_MUTE   &kp C_PLAY_PAUSE _____ _____ _____ _____ _____ _____      _____    _____     _____ _____    _____
                                          _____        _____            _____ _____ _____ _____ _____  &kp LSHFT _____    _____
            >;
        };


        fun_left {
            bindings = <
            _____ _____    _____ _____     _____    _____                             _____ &kp F7 &kp F8 &kp F9 &kp F12 _____
            _____ &kp LALT _____ &kp LCTRL &kp LGUI _____                             _____ &kp F4 &kp F5 &kp F6 &kp F10 _____
            _____ _____    _____ _____     _____    _____     _____ _____ _____ _____ _____ &kp F1 &kp F2 &kp F3 &kp F11 _____
                                 _____     _____    &kp LSHFT _____ _____ _____ _____ _____ _____  _____
            >;
        };

    };
};