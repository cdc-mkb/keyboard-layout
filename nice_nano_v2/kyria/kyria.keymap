/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ß │ ´ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ Q │ W │ E │ R │ T │ Z │ U │ I │ O │ P │ Ü │ + │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Ö │ Ä │ # │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ < │ Y │ X │ C │ V │ B │ N │ M │ , │ . │ - │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)

// Row 2
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +

// Row 3
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #

// Row 4
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -

/* Shifted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ° │ ! │ " │ § │ $ │ % │ & │ / │ ( │ ) │ = │ ? │ ` │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │   │   │   │   │   │   │   │   │   │   │   │ * │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │   │   │   │   │   │   │   │   │   │   │ ' │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ > │   │   │   │   │   │   │   │ ; │ : │ _ │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
// Row 2
#define DE_ASTR LS(DE_PLUS) // *
// Row 3
#define DE_QUOT LS(DE_HASH) // '
// Row 4
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _

/* Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ „ │ ¡ │ “ │ ¶ │ ¢ │ [ │ ] │ | │ { │ } │ ≠ │ ¿ │   │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ « │ ∑ │ € │ ® │ † │ Ω │ ¨ │ ⁄ │ Ø │ π │ • │ ± │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ Å │ ‚ │ ∂ │ ƒ │ © │ ª │ º │ ∆ │ @ │ Œ │ Æ │ ‘ │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≤ │ ¥ │ ≈ │ Ç │ √ │ ∫ │ ~ │ µ │ ∞ │ … │ – │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~

/* Shift+Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │   │ ¬ │ ” │   │ £ │ ﬁ │   │ \ │ ˜ │ · │ ¯ │ ˙ │ ˚ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ » │   │ ‰ │ ¸ │ ˝ │ ˇ │ Á │ Û │   │ ∏ │   │  │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │ Í │ ™ │ Ï │ Ì │ Ó │ ı │   │ ﬂ │   │   │   │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≥ │ ‡ │ Ù │   │ ◊ │ ‹ │ › │ ˘ │ ˛ │ ÷ │ — │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)

#define DEFAULT 0
#define ALPHA_2 1
#define SYM_ONE 2
#define SYM_TWO 3
#define NUM_ONE 4
#define NAV_ONE 5
#define FUN_ONE 6
#define FUN_TWO 7

&mmv {   
    time-to-max-speed-ms = <500>;
    acceleration-exponent=<2>;
};

&mwh {
    acceleration-exponent=<2>;
    time-to-max-speed-ms = <500>;
};


&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    quick_tap_ms = <50>;
    bindings = <&sk>, <&kp>;
};

&sk {
    quick-release;
};

/ {

    behaviors {
        hl: hl {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Sticky Layer";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

    };
};

#define _____ &none

#define lpnky_h(code) &mt LALT code
#define lring_h(code) &mt LCTRL code
#define lmidd_h(code) &mt LSHFT code
#define lindx_h(code) &mt LGUI code

#define rindx_h(code) lindx_h(code)
#define rmidd_h(code) lmidd_h(code)
#define rring_h(code) lring_h(code)
#define rpnky_h(code) lpnky_h(code)

#define lring_b(code) &hl FUN_ONE code
#define lmidd_b(code) &hl NUM_ONE code
#define lindx_b(code) &hl SYM_ONE code

#define rmidd_b(code) &hl SYM_TWO code
#define rindx_b(code) &hl NAV_ONE code
#define rring_b(code) &hl FUN_TWO code


#define HYPER LC(LG(LS(LALT)))
#define MEH LC(LS(LALT))

#define L20( \
    K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8, \
    K9,  K10, K11, K12, K13, K14, K15, K16, \
            K17, K18, K19, K20 \
) \
            _____ _____ _____ _____ _____ _____                         _____ _____ _____ _____ _____ _____ \
            _____ K1    K2    K3    K4    _____                         _____ K5    K6    K7    K8    _____ \
            _____ K9    K10   K11   K12   _____ _____ _____ _____ _____ _____ K13   K14   K15   K16   _____ \
                              _____ K17   K18   _____ _____ _____ _____ K19   K20   _____


#define L20_TAPS( \
    K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8, \
    K9,  K10, K11, K12, K13, K14, K15, K16, \
            K17, K18, K19, K20 \
) \
            L20 (\
            &mt LALT K1, &mt LSHFT K2,    &mt LCTRL K3,    &mt LGUI K4,               &mt LGUI K5,     &mt LCTRL K6,    &mt LSHFT K7,    &mt LALT K8,   \
            &mt MEH K9,  &hl FUN_ONE K10, &hl NUM_ONE K11, &hl SYM_ONE K12,           &hl SYM_TWO K13, &hl NAV_ONE K14, &hl FUN_TWO K15, &mt HYPER K16, \
                                                           K17,             K18, K19, K20 \
            )

/ {
    keymap {
        compatible = "zmk,keymap";

        alpha_one {
            bindings = <
                L20_TAPS(
                    DE_C, DE_R, DE_I, DE_E,                              DE_N,          DE_T, DE_S, DE_H,
                    DE_O, DE_L, DE_U, DE_A,                              DE_B,          DE_D, DE_G, DE_M,
                                      &sk LSHFT, &kp SPACE, &sl ALPHA_2, &kp BACKSPACE
                )
            >;
        };


        alpha_two {
            bindings = <
                L20_TAPS(
                    DE_V,    DE_X,    DE_Z,    DE_J,                             DE_P,          DE_F, DE_K, DE_SS,
                    DE_COMM, DE_ODIA, DE_UDIA, DE_ADIA,                          DE_W,          DE_Y, DE_Q, DE_DOT,
                                               &sk LSHFT, &kp ENTER, &sl ESCAPE, &kp TAB
                )
            >;
        };

       sym_one {
            bindings = <
                L20_TAPS(
                    DE_LABK, DE_LBRC, DE_LCBR,  DE_LPRN,                           DE_RPRN, DE_RCBR, DE_RBRC, DE_RABK, 
                    DE_DLR,  DE_SCLN, DE_DQUO,  DE_QUOT,                           DE_EXLM, DE_QUES, DE_COLN, DE_MINS,      
                                                _____,   &to DEFAULT, &to SYM_ONE, _____
                )
            >;
        };

       sym_two {
            bindings = <
                L20_TAPS(
                    DE_EURO, DE_BSLS, DE_SLSH, DE_ASTR,                           DE_PERC, DE_AMPR, DE_EQL,  DE_GRV, 
                    DE_UNDS, DE_TILD, DE_PIPE, DE_HASH,                           DE_ACUT, DE_DEG,  DE_CIRC, DE_PLUS,
                                               _____,   &to DEFAULT, &to SYM_TWO, _____           
                )
            >;
        };

       num_one {
            bindings = <
                L20_TAPS(
                    N1,     N2,      N3,      N4,                             N7, N8,      N9,       N0,
                    DE_EQL, DE_PLUS, DE_MINS, N5,                             N6, DE_ASTR, DE_SLSH, BACKSPACE,
                                              _____, &to DEFAULT, &kp DE_DOT, _____
                )
            >;
        };

        nav_one {
            bindings = <
            _____ _____        _____          _____              _____           _____                               _____       _____         _____          _____          _____           _____
            _____ lpnky_h(TAB) lring_h(ENTER) lmidd_h(BACKSPACE) lindx_h(SPACE)  _____                               _____       rindx_h(LEFT) rmidd_h(DOWN)  rring_h(UP)    rpnky_h( RIGHT) _____
            _____ _____        &sl FUN_ONE    &sl NUM_ONE        lindx_b(ESCAPE) _____       _____ _____ _____ _____ _____       rindx_b(HOME) rmidd_b(PG_DN) rring_h(PG_UP) &kp END         _____
                                              _____               _____          &to DEFAULT _____ _____ _____ _____ &to NAV_ONE _____         _____
            >;
        };

        fun_one {
            bindings = <
            L20 (
                &kp C_PREV, &kp C_NEXT, &kp C_VOL_DN, &kp C_VOL_UP,                  &bt BT_CLR, &bt BT_SEL 0, &bt BT_SEL 1, _____,
                _____,      _____,      &kp C_MUTE,   &kp C_PLAY_PAUSE,              _____,      _____,        _____,        _____,
                                                                _____, _____, _____, _____
            )
            >;
        };

        fun_two {
            bindings = <
            L20 (
                &kp F1, &kp F2, &kp F3, &kp F4,                         &kp F7,  &kp F8,  &kp F9,  F10,
                _____,  _____,  _____,  &kp F5,                         &kp F6,  &kp F11, &kp F12, ______,
                                        &sk LALT, &sk LSHFT, &sk LCTRL, &sk LGUI
            )
            >;
        };

    };
};