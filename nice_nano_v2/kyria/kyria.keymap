/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ß │ ´ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ Q │ W │ E │ R │ T │ Z │ U │ I │ O │ P │ Ü │ + │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Ö │ Ä │ # │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ < │ Y │ X │ C │ V │ B │ N │ M │ , │ . │ - │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)

// Row 2
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +

// Row 3
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #

// Row 4
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -

/* Shifted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ° │ ! │ " │ § │ $ │ % │ & │ / │ ( │ ) │ = │ ? │ ` │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │   │   │   │   │   │   │   │   │   │   │   │ * │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │   │   │   │   │   │   │   │   │   │   │ ' │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ > │   │   │   │   │   │   │   │ ; │ : │ _ │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
// Row 2
#define DE_ASTR LS(DE_PLUS) // *
// Row 3
#define DE_QUOT LS(DE_HASH) // '
// Row 4
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _

/* Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ „ │ ¡ │ “ │ ¶ │ ¢ │ [ │ ] │ | │ { │ } │ ≠ │ ¿ │   │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ « │ ∑ │ € │ ® │ † │ Ω │ ¨ │ ⁄ │ Ø │ π │ • │ ± │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ Å │ ‚ │ ∂ │ ƒ │ © │ ª │ º │ ∆ │ @ │ Œ │ Æ │ ‘ │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≤ │ ¥ │ ≈ │ Ç │ √ │ ∫ │ ~ │ µ │ ∞ │ … │ – │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~

/* Shift+Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │   │ ¬ │ ” │   │ £ │ ﬁ │   │ \ │ ˜ │ · │ ¯ │ ˙ │ ˚ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ » │   │ ‰ │ ¸ │ ˝ │ ˇ │ Á │ Û │   │ ∏ │   │  │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │ Í │ ™ │ Ï │ Ì │ Ó │ ı │   │ ﬂ │   │   │   │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≥ │ ‡ │ Ù │   │ ◊ │ ‹ │ › │ ˘ │ ˛ │ ÷ │ — │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)

#define DEFAULT 0
#define ALPHA_2 1
#define SYM_ONE 2
#define SYM_TWO 3
#define NUM_ONE 4
#define NAV_ONE 5
#define FUN_ONE 6
#define FUN_TWO 7

&mmv {   
    time-to-max-speed-ms = <500>;
    acceleration-exponent=<2>;
};

&mwh {
    acceleration-exponent=<2>;
    time-to-max-speed-ms = <500>;
};

/ {

    behaviors {
        hl: hl {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Sticky Layer";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sl>, <&kp>;
        };

        hk: hk {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Sticky Key";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;
        };

    };
};

#define _____ &none

#define lpnky_h(code) &hk LALT code
#define lring_h(code) &hk LCTRL code
#define lmidd_h(code) &hk LSHFT code
#define lindx_h(code) &hk LGUI code

#define rmidd_h(code) &hk LSHFT code
#define rindx_h(code) &hk LGUI code
#define rring_h(code) &hk LCTRL code
#define rpnky_h(code) &hk LALT code

#define lring_b(code) &hl FUN_ONE code
#define lmidd_b(code) &hl NUM_ONE code
#define lindx_b(code) &hl SYM_ONE code

#define rmidd_b(code) &hl SYM_TWO code
#define rindx_b(code) &hl NAV_ONE code
#define rring_b(code) &hl FUN_TWO code


/ {
    keymap {
        compatible = "zmk,keymap";

        alpha_one {
            bindings = <
            _____ lpnky_h(DE_C) lring_h(DE_R) lmidd_h(DE_I) lindx_h(DE_E) _____                             _____       rindx_h(DE_N) lmidd_h(DE_T) rring_h(DE_S) rpnky_h(DE_H) _____
            _____ &kp DE_O      lring_b(DE_L) lmidd_b(DE_U) lindx_b(DE_A) _____                             _____       rindx_b(DE_B) lmidd_b(DE_D) rring_b(DE_G) &kp DE_M      _____
            _____ _____         _____         _____         _____         &kp SPACE _____ _____ _____ _____ &sl ALPHA_2 _____         _____         _____         _____         _____
                                              _____         _____         _____     _____ _____ _____ _____ _____       _____         _____
            >;
        };


        alpha_two {
            bindings = <
            _____ lpnky_h(DE_V) lring_h(DE_X)    lmidd_h(DE_Z)      lindx_h(DE_J)        _____                               _____       rindx_h(DE_P) rmidd_h(DE_F) rring_h(DE_K) rpnky_h( DE_SS) _____
            _____ &kp DE_COMM   lring_b(DE_ODIA) &hl NUM_ONE DE_UDIA &hl SYM_ONE DE_ADIA _____                               _____       rindx_b(DE_W) rmidd_b(DE_Y) rring_b(DE_Q) &kp DE_DOT       _____
            _____ _____         _____            _____               _____               &to DEFAULT _____ _____ _____ _____ &to ALPHA_2 _____         _____         _____         _____            _____
                                                 _____               _____               _____       _____ _____ _____ _____ _____       _____         _____
            >;
        };

       sym_one {
            bindings = <
            _____ lpnky_h(DE_LABK) lring_h(DE_LBRC) lmidd_h(DE_LCBR)  lindx_h(DE_LPRN)  _____                               _____       rindx_h(DE_RPRN) rmidd_h(DE_RCBR) rring_h(DE_RBRC) rpnky_h(DE_RABK) _____
            _____ &kp DE_DLR       lring_b(DE_SCLN) lmidd_b( DE_DQUO) lindx_b( DE_QUOT) _____                               _____       rindx_b(DE_EXLM) rmidd_b(DE_QUES) rring_b(DE_COLN) &kp DE_MINS       _____
            _____ _____            _____            _____             _____             &to DEFAULT _____ _____ _____ _____ &to SYM_ONE _____            _____            _____            _____             _____
                                                    _____             _____             _____       _____ _____ _____ _____ _____       _____            _____
            >;
        };

       sym_two {
            bindings = <
            _____ lpnky_h(DE_EURO) lring_h(DE_BSLS)  lmidd_h(DE_SLSH)  lindx_h(DE_ASTR)  _____                              _____        rindx_h(DE_PERC) rmidd_h(DE_AMPR) rring_h(DE_EQL)  rpnky_h( DE_GRV) _____
            _____ &kp DE_UNDS      lring_b( DE_TILD) lmidd_b( DE_PIPE) lindx_b( DE_HASH) _____                              _____        rindx_b(DE_ACUT) rmidd_b(DE_DEG)  rring_b(DE_CIRC) &kp DE_PLUS       _____
            _____ _____             _____             _____             _____            &to DEFAULT _____ _____ _____ _____ &to SYM_ONE _____            _____            _____            _____             _____
                                                      _____             _____            _____       _____ _____ _____ _____ _____       _____            _____
            >;
        };

       num_one {
            bindings = <
            _____ lpnky_h(N1) lring_h(N2)      lmidd_h(N3)      lindx_h(N4) _____                               _____       rindx_h(N7) rmidd_h(N8)      rring_h(N9)      rpnky_h( N0) _____
            _____ &kp DE_EQL  lring_b(DE_PLUS) lmidd_b(DE_MINS) lindx_b(N5) _____                               _____       rindx_b(N6) rmidd_b(DE_ASTR) rring_b(DE_SLSH) &kp BACKSPACE _____
            _____ _____       _____            _____            _____       &to DEFAULT _____ _____ _____ _____ &kp DE_DOT  _____        _____           _____            _____         _____
                                               _____            _____       _____       _____ _____ _____ _____ _____       _____        _____
            >;
        };

        nav_one {
            bindings = <
            _____ lpnky_h(TAB) lring_h(ENTER) lmidd_h(BACKSPACE) lindx_h(SPACE)  _____                               _____       rindx_h(LEFT) rmidd_h(DOWN)  rring_h(UP)    rpnky_h( RIGHT) _____
            _____ _____        &sl FUN_ONE    &sl NUM_ONE        lindx_b(ESCAPE) _____                               _____       rindx_b(HOME) rmidd_b(PG_DN) rring_h(PG_UP) &kp END          _____
            _____ _____        _____          _____               _____          &to DEFAULT _____ _____ _____ _____ &to NAV_ONE _____         _____          _____          _____            _____
                                              _____               _____          _____       _____ _____ _____ _____ _____       _____         _____
            >;
        };

        fun_one {
            bindings = <
            _____ &kp C_PREV &kp C_NEXT  &kp C_VOL_DN    &kp C_VOL_UP          _____                               _____       &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 _____ _____
            _____ _____      &sl FUN_ONE lmidd_b(C_MUTE) lindx_h(C_PLAY_PAUSE) _____                               _____       &sl SYM_TWO &sl NAV_ONE  &sl FUN_TWO  _____ _____
            _____ _____      _____       _____           _____                 &to DEFAULT _____ _____ _____ _____ &to FUN_TWO _____       _____        _____        _____ _____
                                         _____           _____                 _____       _____ _____ _____ _____ _____       _____       _____
            >;
        };

        fun_two {
            bindings = <
            _____ lpnky_h(F1) lring_h(F2) lmidd_h(F3) lindx_h(F4) _____                               _____       rindx_h(F7) rmidd_h(F8)  rring_h(F9)  rpnky_h( F10) _____
            _____ _____       &sl FUN_ONE &sl NUM_ONE lindx_b(F5) _____                               _____       rindx_h(F6) rmidd_h(F11) rring_h(F12) _____          _____
            _____ _____       _____         _____        _____    &to DEFAULT _____ _____ _____ _____ &to FUN_ONE _____       _____        _____        _____          _____
                                            _____        _____    _____       _____ _____ _____ _____ _____       _____      _____
            >;
        };

    };
};